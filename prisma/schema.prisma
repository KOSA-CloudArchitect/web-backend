// Prisma schema for HighPipe - Kubernetes 기반 데이터 파이프라인 자동화
// 리뷰 기반 실시간 감정 분석 및 요약 서비스

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 사용자 인증 및 권한 관리
model User {
  id                    String    @id @default(cuid())
  email                 String    @unique
  password              String
  role                  String    @default("user") // 'user', 'admin'
  isActive              Boolean   @default(true) @map("is_active")
  emailVerified         Boolean   @default(false) @map("email_verified")
  lastLoginAt           DateTime? @map("last_login_at")
  failedLoginAttempts   Int       @default(0) @map("failed_login_attempts")
  lockedUntil           DateTime? @map("locked_until")
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")

  // Relations
  profile               UserProfile?
  sessions              UserSession[]
  searchHistory         SearchHistory[]
  analysisRequests      AnalysisRequest[]
  batchAnalysisRequests BatchAnalysisRequest[]
  watchList             WatchList[]
  interestProducts      InterestProduct[]
  notificationLogs      NotificationLog[]
  notificationSetting   NotificationSetting?

  @@map("users")
  @@index([email])
  @@index([role])
  @@index([isActive])
}

// 사용자 프로필 (확장 정보)
model UserProfile {
  id                      String   @id @default(cuid())
  userId                  String   @unique @map("user_id")
  firstName               String?  @map("first_name")
  lastName                String?  @map("last_name")
  phone                   String?
  avatarUrl               String?  @map("avatar_url")
  timezone                String   @default("Asia/Seoul")
  language                String   @default("ko")
  notificationPreferences Json     @default("{\"email\": true, \"push\": true, \"priceAlert\": true}") @map("notification_preferences") @db.JsonB
  createdAt               DateTime @default(now()) @map("created_at")
  updatedAt               DateTime @updatedAt @map("updated_at")

  // Relations
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

// 사용자 세션 (JWT refresh token 관리)
model UserSession {
  id               String    @id @default(cuid())
  userId           String    @map("user_id")
  refreshTokenHash String    @map("refresh_token_hash")
  deviceInfo       Json?     @map("device_info") @db.JsonB
  ipAddress        String?   @map("ip_address")
  userAgent        String?   @map("user_agent")
  expiresAt        DateTime  @map("expires_at")
  createdAt        DateTime  @default(now()) @map("created_at")
  lastUsedAt       DateTime  @default(now()) @map("last_used_at")

  // Relations
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
  @@index([userId])
  @@index([refreshTokenHash])
  @@index([expiresAt])
}

// 상품 카테고리
model Category {
  id        String     @id @default(cuid())
  name      String
  parentId  String?    @map("parent_id")
  path      String     // 계층 구조 경로 (예: "가전 > 휴대폰 > 스마트폰")
  level     Int        @default(0) // 카테고리 깊이
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")

  // Relations
  parent    Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children  Category[] @relation("CategoryHierarchy")
  products  Product[]

  @@map("categories")
  @@index([parentId])
  @@index([level])
}

// 상품 정보
model Product {
  id            String   @id @default(cuid())
  name          String
  url           String   @unique // 쿠팡 상품 URL
  categoryId    String?  @map("category_id")
  currentPrice  Decimal? @map("current_price") @db.Decimal(10, 2)
  averageRating Float?   @map("average_rating")
  totalReviews  Int      @default(0) @map("total_reviews")
  imageUrl      String?  @map("image_url")
  isActive      Boolean  @default(true) @map("is_active")
  lastCrawledAt DateTime? @map("last_crawled_at")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  category              Category?         @relation(fields: [categoryId], references: [id])
  analysisResults       AnalysisResult[]
  analysisRequests      AnalysisRequest[]
  batchAnalysisRequests BatchAnalysisRequest[]
  realtimeSessions      RealtimeAnalysisSession[]
  watchList             WatchList[]
  priceHistory          PriceHistory[]

  @@map("products")
  @@index([url])
  @@index([categoryId])
  @@index([isActive])
  @@index([lastCrawledAt])
}

// 가격 변동 이력
model PriceHistory {
  id        String   @id @default(cuid())
  productId String   @map("product_id")
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("price_history")
  @@index([productId, createdAt])
}

// 분석 요청 기록 (실시간 분석용)
model AnalysisRequest {
  id            String    @id @default(cuid())
  userId        String?   @map("user_id") // null이면 익명 요청
  productId     String    @map("product_id")
  productUrl    String?   @map("product_url")
  taskId        String    @unique @map("task_id") // Kafka 메시지 추적용
  status        String    @default("PENDING") // 'PENDING', 'PROCESSING', 'COMPLETED', 'FAILED'
  progress      Int       @default(0)
  requestType   String    @map("request_type") // 'REALTIME', 'INTEREST_ANALYSIS', 'SCHEDULED'
  priority      Int       @default(5) // 1(높음) ~ 10(낮음)
  estimatedTime Int?      @map("estimated_time") // 예상 완료 시간 (초)
  errorMessage  String?   @map("error_message")
  metadata      Json?     @db.JsonB // 추가 메타데이터
  createdAt     DateTime  @default(now()) @map("created_at")
  completedAt   DateTime? @map("completed_at")

  // Relations
  user          User?     @relation(fields: [userId], references: [id])
  product       Product   @relation(fields: [productId], references: [id])

  @@map("analysis_requests")
  @@index([userId])
  @@index([productId])
  @@index([taskId])
  @@index([status])
  @@index([createdAt])
}

// 배치 분석 요청 (관심 상품 등록 및 정기 분석용)
model BatchAnalysisRequest {
  id          String    @id @default(uuid()) @map("id")
  productId   String    @map("product_id")
  userId      String    @map("user_id")
  status      BatchAnalysisStatus @default(PENDING)
  scheduledAt DateTime  @default(now()) @map("scheduled_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  metadata    Json?     @db.JsonB

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("batch_analysis_requests")
  @@index([productId])
  @@index([userId])
  @@index([status])
  @@index([scheduledAt])
  @@index([createdAt])
}

// 배치 분석 상태 ENUM
enum BatchAnalysisStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

// 실시간 분석 세션 (NoSQL 최적화)
model RealtimeAnalysisSession {
  id              String   @id @default(cuid())
  productId       String   @map("product_id")
  taskId          String   @unique @map("task_id")
  status          String   @default("processing") // 'processing', 'completed', 'failed'
  
  // 실시간 카드 데이터 (JSONB)
  emotionCards    Json     @default("[]") @map("emotion_cards") @db.JsonB
  
  // 실시간 통계
  currentStats    Json     @default("{\"positive\": 0, \"negative\": 0, \"neutral\": 0, \"totalProcessed\": 0, \"progressPercentage\": 0}") @map("current_stats") @db.JsonB
  
  // 실시간 키워드 (빈도순)
  trendingKeywords Json    @default("[]") @map("trending_keywords") @db.JsonB
  
  // 메타데이터
  startedAt       DateTime @default(now()) @map("started_at")
  lastUpdatedAt   DateTime @default(now()) @updatedAt @map("last_updated_at")
  expiresAt       DateTime @map("expires_at")

  // Relations
  product         Product  @relation(fields: [productId], references: [id])

  @@map("realtime_analysis_sessions")
  @@index([productId])
  @@index([taskId])
  @@index([status])
  @@index([expiresAt])
}

// 최종 분석 결과 (관계형 유지)
model AnalysisResult {
  id               String   @id @default(cuid())
  productId        String   @map("product_id")
  taskId           String   @unique @map("task_id")
  status           String   @default("completed") // 'completed', 'failed'
  sentimentPositive Float?   @map("sentiment_positive")
  sentimentNegative Float?   @map("sentiment_negative")
  sentimentNeutral Float?   @map("sentiment_neutral")
  summary          String?
  finalKeywords    Json?    @map("final_keywords") @db.JsonB
  totalReviews     Int      @default(0) @map("total_reviews")
  averageRating    Float?   @map("average_rating")
  ratingDistribution Json?  @map("rating_distribution") @db.JsonB
  errorMessage     String?  @map("error_message")
  processingTime   Int?     @map("processing_time") // 처리 시간 (초)
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  product          Product  @relation(fields: [productId], references: [id])

  @@map("analysis_results")
  @@index([productId])
  @@index([taskId])
  @@index([status])
  @@index([createdAt])
}

// 검색 기록
model SearchHistory {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  query     String
  resultCount Int    @default(0) @map("result_count")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("search_history")
  @@index([userId, createdAt])
  @@index([query])
}

// 관심 상품 (관심 상품 관리)
model WatchList {
  id                String    @id @default(cuid())
  userId            String    @map("user_id")
  productId         String    @map("product_id")
  priceAlert        Boolean   @default(true) @map("price_alert") // 가격 알림 설정
  targetPrice       Decimal?  @map("target_price") @db.Decimal(10, 2) // 목표 가격
  lastNotifiedAt    DateTime? @map("last_notified_at")
  analysisFrequency String    @default("daily") @map("analysis_frequency") // 'daily', 'weekly', 'monthly'
  isActive          Boolean   @default(true) @map("is_active")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  product           Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("watch_list")
  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
  @@index([isActive])
}

// 관심 상품 (새로운 구조)
model InterestProduct {
  id              String    @id @default(cuid())
  userId          String    @map("user_id")
  productId       String    @map("product_id")
  productName     String    @map("product_name")
  productUrl      String    @map("product_url")
  imageUrl        String?   @map("image_url")
  currentPrice    Decimal?  @map("current_price") @db.Decimal(10, 2)
  originalPrice   Decimal?  @map("original_price") @db.Decimal(10, 2)
  rating          Float?
  reviewCount     Int?      @map("review_count")
  isActive        Boolean   @default(true) @map("is_active")
  lastAnalyzedAt  DateTime? @map("last_analyzed_at")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  analyses        InterestAnalysis[]

  @@map("interest_products")
  @@unique([userId, productUrl])
  @@index([userId])
  @@index([productId])
  @@index([isActive])
}

// 관심 상품 분석 결과
model InterestAnalysis {
  id                  String    @id @default(cuid())
  interestId          String    @map("interest_id")
  productId           String    @map("product_id")
  positiveCount       Int       @default(0) @map("positive_count")
  negativeCount       Int       @default(0) @map("negative_count")
  neutralCount        Int       @default(0) @map("neutral_count")
  summary             String?
  keywords            String?   // JSON string
  totalReviews        Int       @default(0) @map("total_reviews")
  ratingDistribution  String?   @map("rating_distribution") // JSON string
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")

  // Relations
  interest            InterestProduct @relation(fields: [interestId], references: [id], onDelete: Cascade)
  sentimentTrends     SentimentTrend[]

  @@map("interest_analyses")
  @@index([interestId])
  @@index([productId])
  @@index([createdAt])
}

// 감정 추이 데이터
model SentimentTrend {
  id            String    @id @default(cuid())
  analysisId    String    @map("analysis_id")
  date          DateTime
  positiveCount Int       @default(0) @map("positive_count")
  negativeCount Int       @default(0) @map("negative_count")
  neutralCount  Int       @default(0) @map("neutral_count")
  createdAt     DateTime  @default(now()) @map("created_at")

  // Relations
  analysis      InterestAnalysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)

  @@map("sentiment_trends")
  @@index([analysisId, date])
}

// 알림 로그 (notification_logs)
model NotificationLog {
  id              String    @id @default(cuid())
  userId          String    @map("user_id")
  type            String    // 'PRICE_DROP', 'REVIEW_CHANGE', 'ANALYSIS_COMPLETE'
  channel         String    // 'EMAIL', 'PUSH', 'WEB'
  title           String
  message         String
  data            Json?     @db.JsonB // 추가 데이터 (상품 정보, 가격 변동 등)
  status          String    @default("PENDING") // 'PENDING', 'SENT', 'FAILED'
  sentAt          DateTime? @map("sent_at")
  errorMessage    String?   @map("error_message")
  createdAt       DateTime  @default(now()) @map("created_at")

  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_logs")
  @@index([userId])
  @@index([type])
  @@index([channel])
  @@index([status])
  @@index([createdAt])
}

// 사용자 알림 설정
model NotificationSetting {
  id                    String   @id @default(cuid())
  userId                String   @unique @map("user_id")
  emailEnabled          Boolean  @default(true) @map("email_enabled")
  pushEnabled           Boolean  @default(true) @map("push_enabled")
  webEnabled            Boolean  @default(true) @map("web_enabled")
  priceDropEnabled      Boolean  @default(true) @map("price_drop_enabled")
  reviewChangeEnabled   Boolean  @default(true) @map("review_change_enabled")
  analysisCompleteEnabled Boolean @default(true) @map("analysis_complete_enabled")
  priceDropThreshold    Float    @default(10.0) @map("price_drop_threshold") // 가격 하락 임계값 (%)
  reviewChangeThreshold Float    @default(5.0) @map("review_change_threshold") // 리뷰 변화 임계값 (%)
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  // Relations
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_settings")
}

// 시스템 설정 (캐시, 설정값 등)
model SystemConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json     @db.JsonB
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("system_config")
}
