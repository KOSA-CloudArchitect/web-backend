/**
 * MongoDB Î∂ÑÏÑù Í≤∞Í≥º ÏãúÏä§ÌÖú ÌÖåÏä§Ìä∏ Ïä§ÌÅ¨Î¶ΩÌä∏
 * 
 * ÏÇ¨Ïö©Î≤ï:
 * 1. MongoDB ÏÑúÎ≤ÑÍ∞Ä Ïã§Ìñâ Ï§ëÏù∏ÏßÄ ÌôïÏù∏
 * 2. ÌôòÍ≤ΩÎ≥ÄÏàò ÏÑ§Ï†ï ÌôïÏù∏ (MONGODB_URI)
 * 3. node test-mongodb-analysis.js Ïã§Ìñâ
 */

require('dotenv').config();
const mongoose = require('mongoose');
const MongoAnalysisResult = require('./models/mongoAnalysisResult');

async function testMongoDBAnalysisSystem() {
  console.log('üöÄ Starting MongoDB Analysis System test...\n');
  
  const mongoResult = new MongoAnalysisResult();
  
  try {
    // 1. ÌôòÍ≤ΩÎ≥ÄÏàò ÌôïÏù∏
    console.log('üìã Environment Configuration:');
    const mongoUri = process.env.MONGODB_URI || 'mongodb://localhost:27017/kosa_db';
    console.log(`  - MONGODB_URI: ${mongoUri}`);
    console.log();

    // 2. MongoDB Ïó∞Í≤∞ ÌÖåÏä§Ìä∏
    console.log('üîå Testing MongoDB connection...');
    await mongoose.connect(mongoUri);
    console.log('‚úÖ MongoDB connected successfully');
    console.log();

    // 3. Î∂ÑÏÑù Í≤∞Í≥º ÏÉùÏÑ± ÌÖåÏä§Ìä∏
    console.log('üíæ Testing analysis result creation...');
    const testResult1 = await mongoResult.create({
      productId: 'test-product-123',
      taskId: 'test-task-456',
      sentiment: {
        positive: 0.7,
        negative: 0.2,
        neutral: 0.1,
      },
      summary: 'Ïù¥ Ï†úÌíàÏùÄ Ï†ÑÎ∞òÏ†ÅÏúºÎ°ú Ï¢ãÏùÄ ÌèâÍ∞ÄÎ•º Î∞õÍ≥† ÏûàÏäµÎãàÎã§. ÌíàÏßàÏù¥ Ïö∞ÏàòÌïòÍ≥† Í∞ÄÏÑ±ÎπÑÍ∞Ä Îõ∞Ïñ¥ÎÇòÎã§Îäî ÏùòÍ≤¨Ïù¥ ÎßéÏäµÎãàÎã§.',
      totalReviews: 150,
      averageRating: 4.2,
      processingTime: 45,
      keywords: [
        { keyword: 'ÌíàÏßà', frequency: 25, sentiment: 'positive' },
        { keyword: 'Í∞ÄÏÑ±ÎπÑ', frequency: 18, sentiment: 'positive' },
        { keyword: 'Î∞∞ÏÜ°', frequency: 12, sentiment: 'neutral' },
        { keyword: 'Ìè¨Ïû•', frequency: 8, sentiment: 'negative' },
      ],
      reviewDistribution: {
        star5: 60,
        star4: 45,
        star3: 25,
        star2: 15,
        star1: 5,
      },
      crawledAt: new Date(),
      analysisVersion: '1.0.0',
      sourceUrl: 'https://www.coupang.com/products/test-product-123',
      userId: 'test-user-1',
      requestType: 'realtime',
    });
    
    console.log(`‚úÖ Analysis result created: ${testResult1._id}`);
    console.log(`  - Product ID: ${testResult1.productId}`);
    console.log(`  - Task ID: ${testResult1.taskId}`);
    console.log(`  - Total Reviews: ${testResult1.totalReviews}`);
    console.log(`  - Average Rating: ${testResult1.averageRating}`);
    console.log();

    // 4. Ï∂îÍ∞Ä ÌÖåÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
    console.log('üìä Creating additional test data...');
    const testResult2 = await mongoResult.create({
      productId: 'test-product-456',
      taskId: 'test-task-789',
      sentiment: {
        positive: 0.4,
        negative: 0.5,
        neutral: 0.1,
      },
      summary: 'Ïù¥ Ï†úÌíàÏóê ÎåÄÌïú ÏùòÍ≤¨Ïù¥ Î∂ÑÎ∂ÑÌï©ÎãàÎã§. ÏùºÎ∂ÄÎäî ÎßåÏ°±ÌïòÏßÄÎßå ÌíàÏßà Î¨∏Ï†úÎ•º ÏßÄÏ†ÅÌïòÎäî Î¶¨Î∑∞ÎèÑ ÎßéÏäµÎãàÎã§.',
      totalReviews: 89,
      averageRating: 2.8,
      processingTime: 32,
      userId: 'test-user-1',
      requestType: 'realtime',
    });

    const testResult3 = await mongoResult.create({
      productId: 'test-product-123',
      taskId: 'test-task-101',
      sentiment: {
        positive: 0.8,
        negative: 0.1,
        neutral: 0.1,
      },
      summary: 'ÏµúÏã† Î∂ÑÏÑù Í≤∞Í≥º: Ïù¥Ï†ÑÎ≥¥Îã§ Îçî Ï¢ãÏùÄ ÌèâÍ∞ÄÎ•º Î∞õÍ≥† ÏûàÏäµÎãàÎã§.',
      totalReviews: 200,
      averageRating: 4.5,
      processingTime: 38,
      userId: 'test-user-2',
      requestType: 'realtime',
    });
    
    console.log(`‚úÖ Additional test data created: ${testResult2._id}, ${testResult3._id}`);
    console.log();

    // 5. Task IDÎ°ú Ï°∞Ìöå ÌÖåÏä§Ìä∏
    console.log('üîç Testing findByTaskId...');
    const foundByTaskId = await mongoResult.findByTaskId('test-task-456');
    console.log(`‚úÖ Found by task ID: ${foundByTaskId ? 'Success' : 'Failed'}`);
    if (foundByTaskId) {
      console.log(`  - Product ID: ${foundByTaskId.productId}`);
      console.log(`  - Sentiment: ${foundByTaskId.sentimentPositive}/${foundByTaskId.sentimentNegative}/${foundByTaskId.sentimentNeutral}`);
    }
    console.log();

    // 6. ÏÉÅÌíà IDÎ°ú Ï°∞Ìöå ÌÖåÏä§Ìä∏ (ÏµúÏã†Ïàú)
    console.log('üîç Testing findByProductId...');
    const foundByProductId = await mongoResult.findByProductId('test-product-123', 2);
    console.log(`‚úÖ Found by product ID: ${foundByProductId.length} results`);
    foundByProductId.forEach((result, index) => {
      console.log(`  ${index + 1}. Task: ${result.taskId}, Rating: ${result.averageRating}, Created: ${result.createdAt}`);
    });
    console.log();

    // 7. ÏµúÏã† Í≤∞Í≥º Ï°∞Ìöå ÌÖåÏä§Ìä∏
    console.log('üîç Testing findLatestByProductId...');
    const latestResult = await mongoResult.findLatestByProductId('test-product-123');
    console.log(`‚úÖ Latest result: ${latestResult ? 'Success' : 'Failed'}`);
    if (latestResult) {
      console.log(`  - Task ID: ${latestResult.taskId}`);
      console.log(`  - Average Rating: ${latestResult.averageRating}`);
      console.log(`  - Created: ${latestResult.createdAt}`);
    }
    console.log();

    // 8. ÏÇ¨Ïö©ÏûêÎ≥Ñ Ï°∞Ìöå ÌÖåÏä§Ìä∏
    console.log('üë§ Testing findByUserId...');
    const userResults = await mongoResult.findByUserId('test-user-1', 1, 5);
    console.log(`‚úÖ User results: ${userResults.results.length} results, ${userResults.pagination.total} total`);
    console.log(`  - Page: ${userResults.pagination.page}/${userResults.pagination.pages}`);
    userResults.results.forEach((result, index) => {
      console.log(`  ${index + 1}. Product: ${result.productId}, Rating: ${result.averageRating}`);
    });
    console.log();

    // 9. ÏóÖÎç∞Ïù¥Ìä∏ ÌÖåÏä§Ìä∏
    console.log('üìù Testing updateByTaskId...');
    const updatedResult = await mongoResult.updateByTaskId('test-task-456', {
      averageRating: 3.2,
      summary: 'ÏóÖÎç∞Ïù¥Ìä∏Îêú ÏöîÏïΩ: ÌíàÏßàÏù¥ Í∞úÏÑ†ÎêòÏóàÏäµÎãàÎã§.',
    });
    console.log(`‚úÖ Update result: ${updatedResult ? 'Success' : 'Failed'}`);
    if (updatedResult) {
      console.log(`  - New rating: ${updatedResult.averageRating}`);
      console.log(`  - Updated at: ${updatedResult.updatedAt}`);
    }
    console.log();

    // 10. ÌÜµÍ≥Ñ Ï°∞Ìöå ÌÖåÏä§Ìä∏
    console.log('üìà Testing getStats...');
    const stats = await mongoResult.getStats();
    console.log('‚úÖ Statistics:');
    console.log(`  - Total analyses: ${stats.totalAnalyses}`);
    console.log(`  - Avg positive sentiment: ${(stats.avgPositiveSentiment * 100).toFixed(1)}%`);
    console.log(`  - Avg negative sentiment: ${(stats.avgNegativeSentiment * 100).toFixed(1)}%`);
    console.log(`  - Avg neutral sentiment: ${(stats.avgNeutralSentiment * 100).toFixed(1)}%`);
    console.log(`  - Avg total reviews: ${Math.round(stats.avgTotalReviews)}`);
    console.log(`  - Avg rating: ${stats.avgRating?.toFixed(2) || 'N/A'}`);
    console.log(`  - Avg processing time: ${Math.round(stats.avgProcessingTime)}s`);
    console.log();

    // 11. ÏÇ¨Ïö©ÏûêÎ≥Ñ ÌÜµÍ≥Ñ ÌÖåÏä§Ìä∏
    console.log('üìà Testing user-specific stats...');
    const userStats = await mongoResult.getStats({ userId: 'test-user-1' });
    console.log('‚úÖ User statistics:');
    console.log(`  - User analyses: ${userStats.totalAnalyses}`);
    console.log(`  - User avg rating: ${userStats.avgRating?.toFixed(2) || 'N/A'}`);
    console.log();

    // 12. ÏÇ≠Ï†ú ÌÖåÏä§Ìä∏
    console.log('üóëÔ∏è Testing deleteByTaskId...');
    const deleteResult = await mongoResult.deleteByTaskId('test-task-789');
    console.log(`‚úÖ Delete result: ${deleteResult ? 'Success' : 'Failed'}`);
    console.log();

    // 13. ÏµúÏ¢Ö ÌÜµÍ≥Ñ ÌôïÏù∏
    console.log('üìä Final Statistics:');
    const finalStats = await mongoResult.getStats();
    console.log(`  - Remaining analyses: ${finalStats.totalAnalyses}`);
    console.log();

    // 14. Ï†ïÎ¶¨ ÌÖåÏä§Ìä∏ (Ïã§Ï†úÎ°úÎäî Ïã§ÌñâÌïòÏßÄ ÏïäÏùå)
    console.log('üßπ Testing cleanup (simulation)...');
    console.log('‚úÖ Cleanup test completed (no actual cleanup performed)');
    console.log();

    // 15. ÌÖåÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞ Ï†ïÎ¶¨
    console.log('üóëÔ∏è Cleaning up test data...');
    await mongoResult.deleteByTaskId('test-task-456');
    await mongoResult.deleteByTaskId('test-task-101');
    console.log('‚úÖ Test data cleaned up');
    console.log();

    console.log('üéâ All tests completed successfully!');
    console.log('\n‚ú® MongoDB Analysis System is working properly.');
    
  } catch (error) {
    console.error('‚ùå Test failed:', error);
    console.error('\nüîß Troubleshooting:');
    console.error('1. Check if MongoDB server is running');
    console.error('2. Verify MONGODB_URI environment variable');
    console.error('3. Check MongoDB connection and permissions');
    console.error('4. Ensure required MongoDB collections exist');
    process.exit(1);
  } finally {
    // MongoDB Ïó∞Í≤∞ Ï¢ÖÎ£å
    await mongoose.disconnect();
    console.log('üîå MongoDB connection closed');
  }
}

// ÌÖåÏä§Ìä∏ Ïã§Ìñâ
if (require.main === module) {
  testMongoDBAnalysisSystem()
    .then(() => process.exit(0))
    .catch((error) => {
      console.error('‚ùå Unhandled error:', error);
      process.exit(1);
    });
}

module.exports = testMongoDBAnalysisSystem;

